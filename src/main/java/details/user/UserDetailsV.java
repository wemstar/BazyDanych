package details.user;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import commons.Commons;
import org.springframework.stereotype.Controller;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

/**
 * Created by wemstar on 27.12.13.
 */
public class UserDetailsV {
    private JTextField tfUserName;
    private JPasswordField pfUserPassword;
    private JPasswordField tfUserPaswordConfirm;
    private JComboBox cbUserRole;
    private JButton bEditUser;
    private JButton bSaveUser;
    private JPanel mainPanel;
    private JButton bDelete;
    private UserDetailsM model;
    private UserDetailsC controller;


    public UserDetailsV() {
        bEditUser.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                if (Commons.currentUser.getRole().equals("admin")) {
                    setControlState(true);
                } else {
                    JOptionPane.showMessageDialog(null, "Nie masz uprawneń do modyfikacji użytkownika", "Błąd uprawnień", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        });
        bSaveUser.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    if (Commons.currentUser.getRole().equals("admin")) {
                        controller.saveUser();
                        setControlState(false);
                    } else {
                        JOptionPane.showMessageDialog(null, "Nie masz uprawneń do modyfikacji użytkownika", "Błąd uprawnień", JOptionPane.INFORMATION_MESSAGE);
                    }
                } catch (Exception e1) {
                    JOptionPane.showMessageDialog(mainPanel, "Hasła muszą pasowac", "Bład hasło", JOptionPane.ERROR_MESSAGE);
                }

            }
        });
        bDelete.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                controller.deleteUser();
            }
        });
    }

    public UserDetailsM getModel() {
        return model;
    }

    public void setModel(UserDetailsM model) {
        this.model = model;
    }

    public void setNick(String nick) {
        tfUserName.setText(nick);
    }

    public String getNick() {
        return tfUserName.getText();
    }

    public void setPassword(char[] password) {
        tfUserPaswordConfirm.setText(new String(password));
        pfUserPassword.setText(new String(password));
    }

    public char[] getPassword() {
        return tfUserPaswordConfirm.getPassword();
    }

    public char[] getPasswordConfirm() {
        return pfUserPassword.getPassword();
    }

    public void setRole(String role) {
        cbUserRole.setSelectedItem(role);
    }

    public String getRole() {
        return (String) cbUserRole.getSelectedItem();
    }

    public void setControlState(boolean state) {
        tfUserName.setEnabled(state);
        tfUserPaswordConfirm.setEnabled(state);
        pfUserPassword.setEnabled(state);
        cbUserRole.setEnabled(state);
        bEditUser.setEnabled(!state);
        bSaveUser.setEnabled(state);
    }

    public void setController(UserDetailsC controller) {
        this.controller = controller;
    }

    public UserDetailsC getController() {
        return controller;
    }

    public void initializeComponent() {
        cbUserRole.setModel(new DefaultComboBoxModel(Commons.roleList.toArray()));
    }

    public JPanel getMainPanel() {
        return mainPanel;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(5, 3, new Insets(0, 0, 0, 0), -1, -1));
        tfUserName = new JTextField();
        tfUserName.setText("");
        mainPanel.add(tfUserName, new GridConstraints(0, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        pfUserPassword = new JPasswordField();
        mainPanel.add(pfUserPassword, new GridConstraints(1, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        tfUserPaswordConfirm = new JPasswordField();
        mainPanel.add(tfUserPaswordConfirm, new GridConstraints(2, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        cbUserRole = new JComboBox();
        mainPanel.add(cbUserRole, new GridConstraints(3, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Nick");
        mainPanel.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Hsało");
        mainPanel.add(label2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Powtórz Hasło");
        mainPanel.add(label3, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label4 = new JLabel();
        label4.setText("Rola");
        mainPanel.add(label4, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        bEditUser = new JButton();
        bEditUser.setText("Edytuj");
        mainPanel.add(bEditUser, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        bSaveUser = new JButton();
        bSaveUser.setText("Zapisz");
        mainPanel.add(bSaveUser, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        bDelete = new JButton();
        bDelete.setText("Usuń");
        mainPanel.add(bDelete, new GridConstraints(4, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }
}
